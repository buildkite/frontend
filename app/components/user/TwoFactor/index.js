// @flow

import * as React from 'react';
import DocumentTitle from 'react-document-title';
import { QueryRenderer, createRefetchContainer, graphql } from 'react-relay/compat';
import Badge from 'app/components/shared/Badge';
import Button from 'app/components/shared/Button';
import Panel from 'app/components/shared/Panel';
import PageHeader from 'app/components/shared/PageHeader';
import PageWithMenu from 'app/components/shared/PageWithMenu';
import Dialog from 'app/components/shared/Dialog';
import Icon from 'app/components/shared/Icon';
import TwoFactorConfigure from 'app/components/user/TwoFactor/TwoFactorConfigure';
import TwoFactorDelete from 'app/components/user/TwoFactor/TwoFactorDelete';
import { SettingsMenuFragment as SettingsMenu } from 'app/components/user/SettingsMenu';
import RecoveryCodeList from 'app/components/RecoveryCodeList'; // eslint-disable-line
import RecoveryCodes from './RecoveryCodes';
import Environment from 'app/lib/relay/environment';
import SectionLoader from 'app/components/shared/SectionLoader';
import RelayModernPreloader from 'app/lib/RelayModernPreloader';
import type { TwoFactorQueryResponse } from './__generated__/TwoFactorQuery.graphql';
import type { TwoFactor_viewer } from './__generated__/TwoFactor_viewer.graphql';

function AuthenticatorUrl({ name, url }: {|name: string, url: string|}) {
  return (
    <a
      className="lime hover-lime text-decoration-none hover-underline"
      key={name}
      href={url}
      target="_blank"
      rel="noopener noreferrer"
    >
      {name}
    </a>
  );
}

const AUTHENTICATORS = [
  { name: '1Password', url: 'https://1password.com' },
  { name: 'OTP Auth', url: 'https://cooperrs.de/otpauth.html' },
  { name: 'Duo Mobile', url: 'https://duo.com/product/trusted-users/two-factor-authentication/duo-mobile' },
  { name: 'Authy', url: 'https://authy.com' },
  { name: 'Google Authenticator', url: 'https://support.google.com/accounts/answer/1066447' }
];

const AUTHENTICATOR_LIST = AUTHENTICATORS.reduce((memo, authenticator, index, { length }) => [
  ...memo,
  <AuthenticatorUrl {...authenticator} key={authenticator.name} />,
  ((index < length - 1) ? ((index < length - 2) ? ', ' : ' and ') : '')
], []);

const TwoFactorQuery = graphql`
  query TwoFactorQuery {
    viewer {
      ...TwoFactor_viewer
    }
  }
`;

type Props = {
  viewer: TwoFactor_viewer
};

type State = {
  configureDialogOpen: boolean,
  recoveryCodeDialogOpen: boolean,
  recoveryCodeListDialogOpen: boolean,
  deactivateDialogOpen: boolean
};

class TwoFactor extends React.PureComponent<Props, State> {
  state = {
    configureDialogOpen: false,
    recoveryCodeDialogOpen: false,
    recoveryCodeListDialogOpen: false,
    deactivateDialogOpen: false
  };

  get recoveryCodesRemaining(): number | null {
    if (this.props.viewer.totp) {
      return this.props.viewer.totp.recoveryCodes.codes
        .filter(({ consumed }) => !consumed)
        .length;
    }
    return null;
  }

  hasTotp(): boolean {
    if (this.props.viewer.totp) {
      return true;
    }
    return false;
  }

  renderActivateSection() {
    return (
      <Panel className="mb4">
        <Panel.Section>
          <p>Once 2FA is enabled on your Buildkite account, the only way to login to your account is by knowing both your password and a unique code generated by a third-party application such as {AUTHENTICATOR_LIST}</p>

          <Button theme="success" onClick={this.handleConfigureDialogClick}>
            Setup Two-Factor Authentication
          </Button>
        </Panel.Section>
      </Panel>
    );
  }

  renderManageSection() {
    return (
      <React.Fragment>
        <Panel className="mb4">
          <Panel.Section>
            <div className="flex flex-wrap items-center">
              <div className="flex-auto">
                <div className="flex mb1">
                  <strong>Two-Factor Authentication</strong>
                  <Badge className="bg-lime">Enabled</Badge>
                </div>
                <div>Your account is secured with two-factor authentication</div>
              </div>
              <div className="flex flex-wrap">
                <Button theme="default" outline={true} onClick={this.handleConfigureDialogClick} className="m1">
                  Reconfigure
                </Button>
                <Button theme="default" outline={true} onClick={this.handleDeactivateDialogClick} className="m1">
                  Deactivate
                </Button>
              </div>
            </div>
          </Panel.Section>
          <Panel.Section>
            <div className="flex flex-wrap items-center">
              <div className="flex-auto">
                <header className="bold mb1">Recovery Codes</header>
                <p className="p0 m0">There are <a onClick={this.handleRecoveryCodeListDialogClick} className="cursor-pointer lime hover-lime text-decoration-none hover-underline">{this.recoveryCodesRemaining} recovery codes</a> remaining</p>
              </div>
              <Button
                onClick={this.handleRecoveryCodeDialogClick}
                theme="default"
                outline={true}
                className="m1"
              >
                Generate New Codes
              </Button>
            </div>
          </Panel.Section>
        </Panel>

        <Dialog
          isOpen={this.state.recoveryCodeListDialogOpen}
          width={500}
          onRequestClose={this.handleRecoveryCodeListDialogClose}
        >
          <div className="p4">
            <h2 className="m0 h2 semi-bold mb5">Recovery Codes</h2>
            <p>Recovery codes are the only way to get access to your account if you lose access to your authenticator application.</p>
            <p>Recovery codes should be treated like your password. We suggest saving them in a secure password manager, or printing them and storing them somewhere safe.</p>
            {this.props.viewer.totp && this.props.viewer.totp.recoveryCodes ? (
              <RecoveryCodeList
                recoveryCodes={this.props.viewer.totp.recoveryCodes}
                className="border-transparent"
              />
            ) : null}
          </div>
        </Dialog>

        <Dialog
          isOpen={this.state.recoveryCodeDialogOpen}
          width={500}
          onRequestClose={this.handleRecoveryCodeDialogClose}
        >
          <RecoveryCodes
            totp={this.props.viewer.totp}
          />
        </Dialog>

        <Dialog
          isOpen={this.state.deactivateDialogOpen}
          width={400}
          onRequestClose={this.handleDeactivateDialogClose}
        >
          <TwoFactorDelete
            viewer={this.props.viewer}
            onDeactivationComplete={this.handleDeactivateDialogClose}
          />
        </Dialog>
      </React.Fragment>
    );
  }

  renderNoPasswordSection() {
    return (
      <p>
        You do not have a password set for your account. Two-factor authentication is available without setting a password.
      </p>
    );
  }

  render() {
    let contents;
    if (this.props.viewer.user && this.props.viewer.user.hasPassword) {
      if (this.props.viewer.totp) {
        contents = this.renderManageSection();
      } else {
        contents = this.renderActivateSection();
      }
    } else {
      contents = this.renderNoPasswordSection();
    }

    return (
      <DocumentTitle title="Two-Factor Authentication">
        <div data-testid="TwoFactor">
          <PageWithMenu>
            <SettingsMenu viewer={this.props.viewer} />
            <PageHeader>
              <PageHeader.Icon>
                <Icon
                  icon="two-factor"
                  style={{ width: 40, height: 40 }}
                />
              </PageHeader.Icon>
              <PageHeader.Title>
                Two-Factor Authentication
              </PageHeader.Title>
              <PageHeader.Description>
                Two-factor authentication (2FA) adds an additional layer of security to your Buildkite account.
              </PageHeader.Description>
            </PageHeader>

            {contents}

            <Dialog
              isOpen={this.state.configureDialogOpen}
              width={570}
              onRequestClose={this.handleConfigureDialogClose}
            >
              <TwoFactorConfigure
                viewer={this.props.viewer}
                onConfigurationComplete={this.handleConfigureDialogClose}
              />
            </Dialog>
          </PageWithMenu>
        </div>
      </DocumentTitle>
    );
  }

  handleDeactivateDialogClick = () => {
    this.setState({ deactivateDialogOpen: true });
  }

  handleDeactivateDialogClose = () => {
    this.setState({ deactivateDialogOpen: false });
  }

  handleConfigureDialogClick = () => {
    this.setState({ configureDialogOpen: true });
  }

  handleConfigureDialogClose = () => {
    this.setState({ configureDialogOpen: false });
  }

  handleRecoveryCodeListDialogClick = () => {
    this.setState({ recoveryCodeListDialogOpen: true });
  }

  handleRecoveryCodeListDialogClose = () => {
    this.setState({ recoveryCodeListDialogOpen: false });
  }

  handleRecoveryCodeDialogClick = () => {
    this.setState({ recoveryCodeDialogOpen: true });
  }

  handleRecoveryCodeDialogClose = () => {
    this.setState({ recoveryCodeDialogOpen: false });
  }
}

const TwoFactorRefetchContainer = createRefetchContainer(
  TwoFactor,
  graphql`
    fragment TwoFactor_viewer on Viewer {
      ...SettingsMenu_viewer
      ...TwoFactorConfigure_viewer
      ...TwoFactorDelete_viewer

      user {
        hasPassword
      }

      totp {
        ...RecoveryCodes_totp

        id
        recoveryCodes {
          ...RecoveryCodeList_recoveryCodes
          codes {
            code
            consumed
          }
        }
      }
    }
  `,
  TwoFactorQuery
);

type ContainerProps = {};

/* eslint-disable react/no-multi-comp */
export default class TwoFactorQueryContainer extends React.PureComponent<ContainerProps> {
  environment = Environment.get();

  constructor(props: ContainerProps) {
    super(props);

    RelayModernPreloader.preload({ query: TwoFactorQuery, environment: this.environment });
  }

  render() {
    return (
      <QueryRenderer
        dataFrom="STORE_THEN_NETWORK"
        environment={this.environment}
        query={TwoFactorQuery}
        render={this.renderQuery}
      />
    );
  }

  renderQuery({ props }: { props: TwoFactorQueryResponse }) {
    if (props) {
      return <TwoFactorRefetchContainer {...props} />;
    }
    return <SectionLoader />;
  }
}
